##Overview
For this project, I leveraged Spotify data obtained from Kaggle to perform analytics using SQL in SQLiteStudio. 
The dataset includes information about various tracks, such as artist names, track names, popularity, danceability, and more.

## Data Preparation:
--I created a dedicated table, `BIT_DB.Spotifydata`, to store the Spotify data. The table structure includes fields like `popularity`, `danceability`, `energy`, and others to facilitate efficient analysis.

```SQL
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

-- I then inserted the Spotify Data .csv into the table.

-- To gain insights into the dataset, I ran several SQL queries:

  #1 Average Metrics by Artist and Track:
    SELECT artist_name, track_name, avg(popularity), avg(danceability), avg(energy)
      FROM BIT_DB.Spotifydata
      GROUP BY artist_name, track_name;
  
  #2 Most Popular and Danceable Song:
    SELECT track_name, artist_name, MAX(danceability), MAX(popularity)
      FROM BIT_DB.spotifydata;
  
  #3 Top 10 Artists Based on Popularity:
    SELECT artist_name, popularity
      FROM BIT_DB.Spotifydata
      ORDER BY popularity DESC
      LIMIT 10;
  
  #4 Most Danceable and Energetic Song and Shortest Track:
    SELECT artist_name, track_name, danceability, energy
      FROM BIT_DB.Spotifydata
      ORDER BY energy DESC, danceability DESC
      LIMIT 1;
  
    SELECT artist_name, track_name,MIN(duration_ms) 
      FROM BIT_DB.Spotifydata;
       
  #5 Common Table Expression (CTE) for Top Stars:
    WITH popularity_average_CTE AS (SELECT s.artist_name, AVG(s.popularity) AS average_popularity
      FROM spotifydata s 
      GROUP BY s.artist_name)
    SELECT artist_name, average_popularity, 'Top Star' AS tag
      FROM popularity_average_CTE WHERE average_popularity >= 90

-- Feel free to explore the queries and results in this project. If you have any questions, reach out via email at hannafelix232@gmail.com.
